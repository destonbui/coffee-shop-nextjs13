// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  role UserRole @default(USER)

  accounts Account[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

model Banner {
  id          String  @id @default(cuid()) @map("_id")
  image_url   String  @unique
  position    Int
  description String
  href        String?
  active      Boolean @default(true)

  @@map("banners")
}

model Category {
  id                  String   @id @default(cuid()) @map("_id")
  name                String   @unique
  description         String?
  image_url           String   @unique
  active              Boolean  @default(true)
  products_total      Int      @default(0)
  subcategories_names String[]

  subcategories Subcategory[]
  products      Product[]

  @@map("categories")
}

model Subcategory {
  id             String  @id @default(cuid()) @map("_id")
  name           String  @unique
  description    String?
  active         Boolean @default(true)
  category_name  String
  products_total Int     @default(0)

  category Category @relation(fields: [category_name], references: [name], onDelete: Cascade)

  products Product[]

  @@map("subcategories")
}

model Product {
  id               String   @id @default(cuid()) @map("_id")
  category_name    String
  subcategory_name String?
  active           Boolean  @default(true)
  image_url     String
  name             String   @unique
  description      String?
  price            Int
  upsize_price  Int?
  discount         Int?
  tags             String[]
  options OptionOfProduct[]
  toppings ToppingOfProduct[]

  category    Category     @relation(fields: [category_name], references: [name], onDelete: Cascade)
  subcategory Subcategory? @relation(fields: [subcategory_name], references: [name], onDelete: Cascade)

  
  @@map("products")
}

model Topping {
  id    String @id @default(cuid()) @map("_id")
  name  String @unique
  price Int

  products ToppingOfProduct[]

  @@map("toppings")
}

model Option {
  id        String      @id @default(cuid()) @map("_id")
  name      String      @unique
  value     OptionValue @default(NORMAL)

  products OptionOfProduct[]

  @@map("options")
}

enum OptionValue {
  NONE
  LESS
  NORMAL
  MORE
}

model OptionOfProduct {
  id    String @id @default(cuid()) @map("_id")
  
  productId String 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  optionId String 
  option Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model ToppingOfProduct {
  id    String @id @default(cuid()) @map("_id")

  productId String
  product Product @relation(fields: [productId], references: [id])

  toppingId String
  topping Topping @relation(fields: [toppingId], references: [id])
}